集合操作(java.util.*)
java.util.Collection
         ------>java.util.List
                   --------->java.util.ArrayList(Vector)
                   --------->java.util.LinkedList
         ------>java.util.Set 集中中不能放重复对象 是否重复由equals方法决定

1.java.util.ArrayList(数组列表)
  1.1 基本使用（底层操作的就是数组，对数组
                       添加元素、移除元素、扩容等操作)
       add、size有效元素、遍历3种方式
       contains  注意 和实际场景的使用
       remove
       clear
       ...
  1.2 集合中泛型的使用
       集合容器可以容纳任何对象
       但是在实际应用中往往都是容纳同一个类型的对象
       
       注意：泛型只是在编译阶段有效，防止错误输入，
                 如果绕过编译那么就可以绕过泛型
 1.3 ArrayList源代码
       底层是数组（我们在电影租赁小项目中其实已经模拟过)
       重要的成员：Object[] elementData;
                          int size 有效元素的个数
                          其实数组的初始大小是10
                          扩容、后移的操作
                          移除元素要做前移操作
       注意:ArrayList这种有数组作为底层的操作
              最好估算元素的多少来指定底层数组的大小
              ArrayList list = new ArrayList(大小给定);
              来避免扩容操作，因为扩容操作会产生
              垃圾，占用内存，性能较差
 1.4 java.util.Vector
       底层也是数组的操作，所以大部分功能和ArrayList一样
       遍历中有一种老的遍历方式Enumeration，
       ArrayList存在的遍历方式也都有
       ArrayList是线程不安全的，Vector是线程安全的
       jdk7之前的版本扩容的大小稍有差异
2.LinkedList  (链表结构)
  2.1基本使用 和 ArrayList类似     
       提供了更为丰富的头尾的操作addFirst、addLast、getFirst、getLast
        removeFirst() removeLast()
  2.2头尾操作较多的常用适合使用LinkedList
       比如贪吃蛇 
       案例：控制台操作贪吃蛇Node、Worm、WormPanel、WormTest
  2.3数据结构（链表结构--->双向链表)
      内部包含了一个静态内部类Node
                                               Object object
                                               Node next
                                               Node pre
 
 3.java.util.HashSet集合
   3.1基本使用
       注意：容纳的对象必须根据自己的唯一标识来重写
                 equals和hashCode方法。
       注意：对象一旦放入HashSet容器中，
                那么对象的唯一标识属性的值不能在
                修改，否则会导致对象移除不了。
  3.2HashSet的数据结构
      HashSet底层用的就是HashMap
      所以很多底层的结构我们学完HashMap之后，再看。
      
4. java.util.TreeSet
   TreeSet中容纳的对象，必须要能排序(排序方式有自己来定义)    
   两种排序的比较器
    4.1 java.lang.Comparable 
        TreeSet使用无参数的构造函数，那么
        容纳的对象必须实现Comparable接口
    4.2java.util.Comparator
        TreeSet构造的时候使用Comparator作为构造函数的参数
         比较方法如果返回0 ，那么对象不能重复加入
    4.3数据结构底层是TreeMap 
         关于Tree的结构我们可以不用深入了解，熟悉使用即可
       
 java.util.Map
     ----->java.util.HashMap
     ----->java.util.TreeMap
     ----->java.util.Hashtable
     
     
 5.java.util.HashMap(key/value)      
   5.1基本操作
   5.2用HashMap的泛型实现基本操作避免强制类型转换
   5.3map.put(key,value)如果key相同，后面的value会覆盖前面的
        这个特点特别适用用来做计数
   5.4HashMap的数据结构（数组+链表的结构)
        分析的源代码
          a.HashMap包含了一个Entry(key,value,next,hash)的内部类
          key/value放入HashMap的时候都会被包装成Entry的对象
          b.HashMap成员就有Entry的数组，该数组的大小默认是16
             ，永远是2的次方数，如果自己给出的不是2的次方数
             会转换成大于并最接近自己给出的2的次方数 
             put(key,value)时其实就是转换成Entry对象并放入数组中
          c.put方法的实现
             c.1根据key的hashCode进行hash运算（hash算法不用关心)
                  得到值hash
             c.2根据hash值去确定数组的位置
                   hash&(table.length-1)
                   等价与  hash % table.length   length是2的次方数该公式成立
                   正好获取了数组的位置
             c.3 如果这个位置没有元素存在，直接包装Entry的实例
                   并给数组元素赋值
                   如果计算出的位置已经有元素存在，就要判断是否
                   key相同，如果相同则覆盖，并且要遍历整个链表
                   如果都不覆盖，插入到链表的头部
                   
                   如果计算出来的位置相同，这就是冲突率
                   
                   注意1:我们要减少冲突率，因为一旦放入链表中
                   以后总是要遍历链表，效率差，要尽量把
                   元素直接放入数组，而非链表。根据实际要求
                   重写hashCode和equals方法
                   
                   注意2：底层是数组，尽量减少扩容，所以
                   HashMap放入元素的时候也应该估算
                   数组的大小，避免扩容操作
                   
                   HashMap中有加载因子默认是0.75
                   比如默认大小16，那么数组已经有12个元素时，会自动扩容
       c.4  get方法实现
              通过key查找元素的算法和放入是一样的。
              所以一旦key放入HashMap 就不应该修改根hashCode和equals
              方法生成相关的属性的值了。否则就找不到了。
              
              在HashSet中我们提过这个。那么看一下HashSet的源码
              HashSet中操作的就是HashMap
              add方法的时候只用HashMap的key,value是死得。所以数据
              结构是一样的。
              
 6.TreeMap(key,value)
     key必须要能够根据某种规则排序
     通过两种比较器，TreeSet中用的就是TreeMap
                   
                   
  7.Hashtable
    7.1和HashMap相比类的层次结构不一样当然都实现了Map接口
        基本操作类似
    7.2HashMap中key/value都可以是null
        而Hashtable不能是null,会抛出NullPointException的异常
    7.3. Hashtable是线程安全的（线程并发时效率低，但是数据一致性高)
          HashMap是线程不安全的(线程并发时效率高，数据可能会存在安全问题)
    7.4 Hashtable还有一个子类
         java.util.Properties类这个类在将来用的比较多用来加载资源文件
         讲IO操作的时候会详细讲解
    
 8. 其它
    还有一些集合类当家可以查阅帮助文档，最常用的我们已经介绍
    java.util.Collections类   
       该类封装了一些对集合的操作都是静态方法
       面试有时也会问和Collection类有什么关系，
       没什么关系，介绍两个类的用途即可
    
    
    
                     
                       
                       
                       
                       
                       