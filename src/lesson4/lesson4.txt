java的异常
1.什么是异常
  test()
  {
       openFile();//文件可能打不开
       readFile();//文件可能读失败
       writetoOtherFile();
       closeFile();
  }
  你的程序当中可能出现意外,如上的程序，当然也有内存不够等其它意外
  java中已经把异常or错误都分类了
  首先java吧错误or异常分成了两大类都是java.lang.Throwable的子类
  java.lang.Error  系统级的异常，一般程序很难调试
  java.lang.Exception   程序级的异常，通过代码可以处理
  
 2.java.lang.Exception它是一切程序级异常的父类
  a. java中把所有产生的程序级异常都进行了分类，我们
   程序中出现的任何异常都能够在分类中找到。
  b.Exception大的方向也分成了两种
      b.1jvm能自动捕获的异常java.lang.RuntimeException及其子类
          当然也可以自己处理
      b.2jvm不能捕获的异常必须通过程序自己处理，如果不处理
          程序编译不通过
3.如何自己去处理
   test()
  {
      openFile();
      if(打开成功)
      {
           readFile();
           if(readFile成功)
           {
              writeFile();
              if(writeFile..){}else{}
           }else{
           }
      }else{
        //...处理
      }
  }
   以上的方式是在是太麻烦了。把本来的业务代码和异常处理都搅合在一起
   ，非常乱。
   a.try catch关键字
    try
     {
        业务代码(可能会产生异常)
     }catch()
     {
         异常的处理
     }
   b.try后可以有多个cache
      多个cache的时候要注意：
       子类一定要放在父类的前面 因为父类的引用可以引用子类的对象
       java.lang.Exception是一起异常的父类，它就可以处理任何异常（可能信息不太精确)
  c.finally关键字
     不管有没有异常最终都要执行的语句（有一些资源需要关闭)
     try{}catch(){}finally{}
     try{}finally{}
     
 4.throw/throws 
    throw 在某种情况下 抛出（制造出)一个异常
    throws 是用来回避异常的
       注意：当子类重写父类方法的时候，不能throws
                 比父类更多的异常,除非多throws的异常是RuntimeException
         原理:java中，父类可以接受任何子类对象
                如果子类比父类有更多的约束，那么父类处理
                不了就出问题了。所以在java中子父类进行继承
                子类不能比父类有更多的约束。面向对象的设计中
                有一个里氏替换原则说明的就是这个问题。
  5.Exception 有几个常用的方法(子类都有)
     getMessage()获取异常的信息
     toString()
     printStackTrace();
 6.自定义的异常
    自定义的异常需要继承已经提供的异常类
    
 7.有了异常之后一些细节要注意
    如:函数如果有返回值，那么不管有何异常产生都要保证函数有返回值
        函数中如下   try{}catch(){}finally{} return 返回值
                           try{ return ..}catch(){return ..}finally{}
               是finally先执行还是return 先执行 不管怎么写
               函数遇到return就结束，所以finally一定在return之前执行
       
       
       
       
       
       
       
       
  
  
  
  
  